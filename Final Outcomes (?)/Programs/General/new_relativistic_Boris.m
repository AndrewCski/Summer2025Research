function [r_new, v_new] = new_relativistic_Boris(r, v, timestep, B, G, E, case_id, m, q)

% Relativistic Boris Pusher Step. 
% 
% Takes current position, velocity, primary B-field, and E-field, alongside
% chosen timestep, particle mass, and particle charge as parameters. 
% Outputs new position and velocity of the particle.
%
% To utilize E-field generated by Ambient magnetospheric plasma, leave E
% input parameter as 1, otherwise use 0. To make use of gravitational
% attraction, do the same for the G parameter.


c = 299792458;                          % speed of light (m/s)

mu0 = 4*pi*1e-7;                        % vacuum permeability (H/m)
R_E = 1560e3;                           % Europa radius (m)
R_G = 2631e3;                           % Ganymede radius (m)

if case_id == "Zimmer"
    A = 1;
    phi = 0;
    M0 = -(4*pi/mu0) * A * exp(1i*phi) * B .* (R_E^3)/2;
    M_real = real(M0);
    B(3,:) = -385 * 10^-9;
    m_moon = 4.79984e22;                       % Europa mass (kg)
elseif case_id == "Ganymede"
    M_dip = [-4.1; 9; -131] * 1e18;
    M_ind = ((-2 * pi * 0.84 * R_G^3) / mu0) .* B;
    M_real = M_dip + M_ind;
    B(3,:) = -75 * 10^-9;
    m_moon = 1.48e23;                          % Ganymede mass (kg)    
else % Nordheim Cases 0/1, or Europa MHD
    M_real = B .* 0;
    B(3,:) = -385 * 10^-9;
    m_moon = 4.79984e22;                       % Europa mass (kg)
end

B_sec = @(r, M) (mu0/(4*pi)) * (3*dot(r, M)*r - M*norm(r).^2) / norm(r).^5;

% magnetic field at this position and time
B_tot = B_sec(r, M_real(:)) + B;

if E
    E = -cross([90000; 0; 0], B_tot);
else
    E = [0; 0; 0];
end

if G
    G = 6.6743 * 1e-11; % gravitational constant (m^3 kg^-1 s^-2)
end

% current velocity and momentum
p = m * v / sqrt(1 - norm(v)^2 / c^2);  % relativistic momentum

% step 1: half electric field push
p_minus = p + (q * timestep / 2) * E;

% step 2: magnetic rotation (Boris rotation in momentum space)
gamma_minus = sqrt(1 + norm(p_minus)^2 / (m^2 * c^2));
t = (q * timestep / (2 * m * gamma_minus)) * B_tot;
t_mag2 = dot(t, t);
s = 2 * t / (1 + t_mag2);

% p' = p_minus + p_minus x t
p_prime = p_minus + cross(p_minus, t);
% p_plus = p_minus + (p_prime x s)
p_plus = p_minus + cross(p_prime, s);

% step 2.5: apply gravitational force (if enabled)

p_plus = p_plus - G .* m .* m_moon .* timestep .* r ./ (norm(r + 1e-6)^3);

% step 3: second half electric field push
p_new = p_plus + (q * timestep / 2) * E;

% final momentum and velocity update
gamma_new = sqrt(1 + norm(p_new)^2 / (m^2 * c^2));
v_new = p_new / (gamma_new * m);

% update position using updated velocity
r_new = r + v_new * timestep;